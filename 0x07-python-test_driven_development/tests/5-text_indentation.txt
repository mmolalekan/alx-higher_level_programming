===============================
Usage of 5-text_indentation.txt
===============================

This module defines a function  that prints a text with 2 new lines
after each of these characters: ., ? and :

>>> text_indentation = __import__('5-text_indentation').text_indentation

# Test case 1: Valid text with periods, question marks, and colons
>>> text_indentation("This is a sentence. This is another sentence? And this is the final sentence:")
This is a sentence.
<BLANKLINE>
This is another sentence?
<BLANKLINE>
And this is the final sentence:
<BLANKLINE>

# Test case 2: Valid text with only periods
>>> text_indentation("Hello. World. Python.")
Hello.
<BLANKLINE>
World.
<BLANKLINE>
Python.
<BLANKLINE>

# Test case 3: Valid text with only question marks
>>> text_indentation("How are you? Are you okay?")
How are you?
<BLANKLINE>
Are you okay?
<BLANKLINE>

# Test case 4: Valid text with only colons
>>> text_indentation("First item: apples. Second item: oranges. Third item: bananas.")
First item:
<BLANKLINE>
apples.
<BLANKLINE>
Second item:
<BLANKLINE>
oranges.
<BLANKLINE>
Third item:
<BLANKLINE>
bananas.
<BLANKLINE>

# Test case 5: Valid text with no punctuation marks
>>> text_indentation("This is a simple text without any punctuation marks")
This is a simple text without any punctuation marks

# Test case 6: Empty string as text
>>> text_indentation("")

# Test case 7: None as text
>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string

# Test case 8: List as text
>>> text_indentation(['Hello', 'world'])
Traceback (most recent call last):
TypeError: text must be a string

# Test case 9: Numeric value as text
>>> text_indentation(12345)
Traceback (most recent call last):
TypeError: text must be a string

# Test case 10: Valid text with leading/trailing spaces
>>> text_indentation("   This is a text with leading and trailing spaces.   ")
   This is a text with leading and trailing spaces.
<BLANKLINE>
<BLANKLINE>